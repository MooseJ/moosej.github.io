{"version":3,"sources":["components/header/Logo.js","components/header/BurgerMenu.js","components/header/NavLinks.js","components/header/CollapsableNavLinks.js","components/header/Nav.js","components/Header.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Logo","className","Component","BurgerMenu","props","handleBurgerMenuClick","setState","state","isNavbarOpen","onClick","this","collapsibleMenu","NavLinks","CollapsableNavLinks","Nav","Header","Main","id","App","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2ZAaeA,G,mMARX,OACE,yBAAKC,UAAU,QACb,wBAAIA,UAAU,aAAd,W,GAJWC,cCgCJC,G,kBA9Bb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAMRC,sBAAwB,kBACtB,EAAKC,UAAS,SAACC,GAAD,MAAa,CAACC,cAAeD,EAAMC,kBANjD,EAAKD,MAAQ,CACXC,cAAc,GAHA,E,sEAWhB,OACE,oCACE,yBAAKP,UAAU,cAAcQ,QAASC,KAAKL,uBACzC,+BACA,+BACA,gCAEF,yBAAKJ,UAAYS,KAAKH,MAAMC,aAAe,mBAAqB,2BAC5DE,KAAKH,MAAMC,aAAeE,KAAKN,MAAMO,gBAAkB,W,GApB1CT,cCoBVU,G,uLAnBX,OACE,wBAAIX,UAAU,aACZ,wCAGA,wCAGA,0CAGA,+C,GAbeC,cCqBRW,G,uLAnBX,OACE,wBAAIZ,UAAU,qBACZ,wCAGA,wCAGA,0CAGA,+C,GAb0BC,cCanBY,E,iLATX,OACE,oCACE,kBAAC,EAAD,CAAYH,gBAAiB,kBAAC,EAAD,QAC7B,kBAAC,EAAD,W,GALUT,aCYHa,E,iLATP,OACE,gCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANSb,aCmBNc,G,uLAlBP,OACE,8BACE,yBAAKC,GAAG,iBACN,wBAAIA,GAAG,aAAP,kBAGA,0CACa,6BADb,YAEW,6BAFX,OAGM,6BAHN,6B,GATKf,cCEEgB,E,iLAEjB,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALyBC,IAAMjB,WCOnBkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e106bca9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Logo.css';\n\nclass Logo extends Component {\n  render() {\n    return (\n      <div className=\"logo\">\n        <h2 className=\"logo-text\">MJ</h2>\n      </div>\n    )\n  }\n}\n\nexport default Logo;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './BurgerMenu.css';\n\nclass BurgerMenu extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      isNavbarOpen: false\n    }\n  }\n\n  handleBurgerMenuClick = () =>\n    this.setState((state) =>  ({isNavbarOpen: !state.isNavbarOpen}))\n\n  render() {\n    return (\n      <>\n        <div className=\"burger-menu\" onClick={this.handleBurgerMenuClick}>\n          <span></span>\n          <span></span>\n          <span></span>\n        </div>\n        <div className={ this.state.isNavbarOpen ? \"collapsible-menu\" : \"hidden collapsible-menu\"  } > \n          { this.state.isNavbarOpen ? this.props.collapsibleMenu : null }\n        </div>\n      </>\n    )\n  }\n}\n\nBurgerMenu.propTypes = {\n  collapsibleMenu: PropTypes.element\n}\n\nexport default BurgerMenu;\n","import React, { Component } from 'react';\nimport './NavLinks.css';\n\nclass NavLinks extends Component {\n  render() {\n    return ( \n      <ul className=\"nav-links\">\n        <li>\n          ABOUT ME\n        </li>\n        <li>\n          PROJECTS\n        </li>\n        <li>\n          EXPERIENCE\n        </li>\n        <li>\n          CONTACT ME\n        </li>\n      </ul>\n    )\n  }\n}\n\nexport default NavLinks;","import React, { Component } from 'react';\nimport './CollapsableNavLinks.css';\n\nclass CollapsableNavLinks extends Component {\n  render() {\n    return (\n      <ul className=\"collapsible-links\">\n        <li>\n          ABOUT ME\n        </li>\n        <li>\n          PROJECTS\n        </li>\n        <li>\n          EXPERIENCE\n        </li>\n        <li>\n          CONTACT ME\n        </li>\n      </ul>\n    )\n  }\n}\n\nexport default CollapsableNavLinks;","import React, { Component } from 'react';\nimport BurgerMenu from './BurgerMenu';\nimport NavLinks from './NavLinks';\nimport CollapsableNavLinks from './CollapsableNavLinks'\n\nclass Nav extends Component {\n  render() {\n    return ( \n      <>\n        <BurgerMenu collapsibleMenu={<CollapsableNavLinks/>} />\n        <NavLinks/>\n      </>\n    )\n  }\n}\n\nexport default Nav;\n","import React, { Component } from 'react';\nimport './Header.css';\nimport Logo from './header/Logo';\nimport Nav from './header/Nav';\n\nclass Header extends Component {\n   \n    render() {\n        return (\n          <header>\n            <Logo></Logo>\n            <Nav></Nav>\n          </header>\n        )\n      }\n    }\n    \nexport default Header\n","import React, { Component } from 'react';\nimport './Main.css';\n\nclass Main extends Component {\n   \n    render() {\n        return (\n          <main>\n            <div id=\"main-headline\">\n              <h2 id=\"main-name\">\n                Mustafa Jebara\n              </h2>\n              <h1>\n                Developer, <br/>\n                Creator, <br/>\n                and <br/>\n                Father ( Of a Cat )\n              </h1>\n            </div>\n          </main>\n        )\n      }\n    }\n    \nexport default Main","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Main from './components/Main'\n\nexport default class App extends React.Component {\n  render() {\n    return (  \n      <>\n        <Header></Header>\n        <Main></Main>\n      </> \n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}