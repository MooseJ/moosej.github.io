{"version":3,"sources":["compnents/projects/projects.js","compnents/about/about.js","compnents/header/header.js","compnents/work-experience/work-experience.js","App.js","serviceWorker.js","index.js"],"names":["Projects","className","Component","About","Header","path","this","props","location","pathname","to","WorkExperience","App","href","rel","component","exact","React","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kZAGqBA,G,6LAEjB,OACE,6BACE,wBAAIC,UAAU,kBAAd,iB,GAJ8BC,cCAjBC,G,uLAEjB,OACE,6BACE,wBAAIF,UAAU,eAAd,c,GAJ2BC,cCCdE,G,uLAEjB,IAAMC,EAAOC,KAAKC,MAAMC,SAASC,SACjC,OACI,4BAAQR,UAAU,oBAChB,yBAAKA,UAAU,QACb,wBAAIA,UAAU,aAAd,mBAIF,6BACE,4BACE,wBAAIA,UAAU,QACZ,kBAAC,IAAD,CACES,GAAG,IACHT,UAAS,oBAAwB,MAATI,EAAe,mBAAqB,KAF9D,oBAMF,wBAAIJ,UAAU,QACZ,kBAAC,IAAD,CACES,GAAG,YACHT,UAAS,oBAAwB,cAATI,EAAuB,mBAAqB,KAFtE,aAMF,wBAAIJ,UAAU,QACZ,kBAAC,IAAD,CACES,GAAG,SACHT,UAAS,oBAAwB,WAATI,EAAqB,mBAAqB,KAFpE,iB,GA3BoBH,cCDfS,G,uLAEjB,OACE,6BACE,wBAAIV,UAAU,yBAAd,wB,GAJoCC,cCKvBU,E,iLAEjB,OACE,kBAAC,IAAD,KACE,0BAAMC,KAAK,qDAAqDC,IAAI,eACpE,yBAAKb,UAAU,OAEb,kBAAC,IAAD,CAAOI,KAAK,IAAIU,UAAWX,IAC3B,kBAAC,IAAD,CAAOY,OAAK,EAACX,KAAK,IAAIU,UAAWJ,IACjC,kBAAC,IAAD,CAAOK,OAAK,EAACX,KAAK,YAAYU,UAAWf,IACzC,kBAAC,IAAD,CAAOK,KAAK,SAASU,UAAWZ,U,GAVTc,IAAMf,WCInBgB,QACW,cAA7BC,OAAOX,SAASY,UAEe,UAA7BD,OAAOX,SAASY,UAEhBD,OAAOX,SAASY,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b4b888cc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport './projects.css'\n \nexport default class Projects extends Component {\n  render() {\n    return (\n      <div>\n        <h1 className=\"projects-title\">PROJECTS</h1>\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport './about.css';\n\nexport default class About extends Component {\n  render() {\n    return (\n      <div>\n        <h1 className=\"about-title\">ABOUT</h1>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './header.css';\n\nexport default class Header extends Component {  \n  render() {\n    const path = this.props.location.pathname;\n    return (\n        <header className=\"header-container\">\n          <div className=\"logo\">\n            <h1 className=\"nav-title\">\n              MUSTAFA JEBARA\n            </h1>\n          </div>\n          <nav>\n            <ul>\n              <li className=\"item\">\n                <Link \n                  to=\"/\" \n                  className={`item-link ${path === '/' ? \"item-link-active\" : \"\"}`}>\n                  WORK EXPERIENCE\n                </Link>\n              </li >\n              <li className=\"item\">\n                <Link \n                  to=\"/projects\" \n                  className={`item-link ${path === '/projects' ? \"item-link-active\" : \"\"}`}>\n                  PROJECTS\n                </Link>\n              </li >\n              <li className=\"item\">\n                <Link \n                  to=\"/about\" \n                  className={`item-link ${path === '/about'  ? \"item-link-active\" : \"\"}`}>\n                  ABOUT \n                </Link>\n              </li>\n            </ul>\n          </nav>\n        </header>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport './work-experience.css';\n\nexport default class WorkExperience extends Component {\n  render() {\n    return (\n      <div>\n        <h1 className=\"work-experience-title\">WORK EXPERIENCE</h1>\n      </div>\n    )\n  }\n}","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom'; \nimport './App.css';\nimport Projects from './compnents/projects/projects';\nimport About from './compnents/about/about';\nimport Header from './compnents/header/header';\nimport WorkExperience from './compnents/work-experience/work-experience';\n\nexport default class App extends React.Component {\n  render() {\n    return (   \n      <BrowserRouter>\n        <link href=\"https://fonts.googleapis.com/css?family=Montserrat\" rel=\"stylesheet\"></link>\n        <div className=\"App\">\n          {/* The Header is wrapped around a wrapper component is to give Header access to the current route path */}\n          <Route path=\"/\" component={Header} />\n          <Route exact path=\"/\" component={WorkExperience} />\n          <Route exact path=\"/projects\" component={Projects} />\n          <Route path=\"/about\" component={About} />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}